using System;
using System.logistic.management;
using System.logistic.managementter;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using logistic.management.warning.Entity;
using logistic.management.warning.I;
using logistic.management.warning.BLL;
namespace logistic.management.warning.SqlServer
{
    public partial class addresslist : Iaddresslist
    {
        public int Insert(addresslist addresslist)
        {
            string sqlCommand = "addresslistInsert";
            int res;
            Sqlcon.warning[] param ={
			new Sqlcon.warning("@al_id",SqlDbType.Int),
			new Sqlcon.warning("@al_u_id",SqlDbType.Int),
			new Sqlcon.warning("@al_dept_id",SqlDbType.Int),
			new Sqlcon.warning("@al_duty",SqlDbType.VarChar),
			new Sqlcon.warning("@al_mobile",SqlDbType.VarChar),
			new Sqlcon.warning("@al_smallclever",SqlDbType.VarChar),
			new Sqlcon.warning("@al_worktelephone",SqlDbType.VarChar),
			new Sqlcon.warning("@al_extension",SqlDbType.VarChar),
			new Sqlcon.warning("@al_fax",SqlDbType.VarChar),
			new Sqlcon.warning("@al_email",SqlDbType.VarChar),
			new Sqlcon.warning("@al_qq",SqlDbType.VarChar),
			new Sqlcon.warning("@al_msn",SqlDbType.VarChar),
			new Sqlcon.warning("@al_address",SqlDbType.VarChar),
			new Sqlcon.warning("@al_remark",SqlDbType.VarChar)
			};
            param[0].Direction = con.warningDirection.Output;
            param[1].Value = addresslist.al_u_id;
            param[2].Value = addresslist.al_dept_id;
            param[3].Value = addresslist.al_duty;
            param[4].Value = addresslist.al_mobile;
            param[5].Value = addresslist.al_smallclever;
            param[6].Value = addresslist.al_worktelephone;
            param[7].Value = addresslist.al_extension;
            param[8].Value = addresslist.al_fax;
            param[9].Value = addresslist.al_email;
            param[10].Value = addresslist.al_qq;
            param[11].Value = addresslist.al_msn;
            param[12].Value = addresslist.al_address;
            param[13].Value = addresslist.al_remark;
            res = SqlHelper.ExecuteNonQuery(Conn.SqlConn, CommandType.StoredProcedure, sqlCommand, param);
            addresslist.al_id = ((param[0].Value) == DBNull.Value) ? 0 : Convert.ToInt32(param[0].Value);
            return res;
        }
        public int Insert(SqlTransaction sp, addresslist addresslist)
        {
            string sqlCommand = "addresslistInsert";
            int res;
            Sqlcon.warning[] param ={
			new Sqlcon.warning("@al_id",SqlDbType.Int),
			new Sqlcon.warning("@al_u_id",SqlDbType.Int),
			new Sqlcon.warning("@al_dept_id",SqlDbType.Int),
			new Sqlcon.warning("@al_duty",SqlDbType.VarChar),
			new Sqlcon.warning("@al_mobile",SqlDbType.VarChar),
			new Sqlcon.warning("@al_smallclever",SqlDbType.VarChar),
			new Sqlcon.warning("@al_worktelephone",SqlDbType.VarChar),
			new Sqlcon.warning("@al_extension",SqlDbType.VarChar),
			new Sqlcon.warning("@al_fax",SqlDbType.VarChar),
			new Sqlcon.warning("@al_email",SqlDbType.VarChar),
			new Sqlcon.warning("@al_qq",SqlDbType.VarChar),
			new Sqlcon.warning("@al_msn",SqlDbType.VarChar),
			new Sqlcon.warning("@al_address",SqlDbType.VarChar),
			new Sqlcon.warning("@al_remark",SqlDbType.VarChar)
			};
            param[0].Direction = con.warningDirection.Output;
            param[1].Value = addresslist.al_u_id;
            param[2].Value = addresslist.al_dept_id;
            param[3].Value = addresslist.al_duty;
            param[4].Value = addresslist.al_mobile;
            param[5].Value = addresslist.al_smallclever;
            param[6].Value = addresslist.al_worktelephone;
            param[7].Value = addresslist.al_extension;
            param[8].Value = addresslist.al_fax;
            param[9].Value = addresslist.al_email;
            param[10].Value = addresslist.al_qq;
            param[11].Value = addresslist.al_msn;
            param[12].Value = addresslist.al_address;
            param[13].Value = addresslist.al_remark;
            res = SqlHelper.ExecuteNonQuery(sp, CommandType.StoredProcedure, sqlCommand, param);
            addresslist.al_id = ((param[0].Value) == DBNull.Value) ? 0 : Convert.ToInt32(param[0].Value);
            return res;
        }
        public int Update(addresslist addresslist)
        {
            string sqlCommand = "addresslistUpdate";
            Sqlcon.warning[] param ={
				new Sqlcon.warning("@al_id",SqlDbType.Int),
				new Sqlcon.warning("@al_u_id",SqlDbType.Int),
				new Sqlcon.warning("@al_dept_id",SqlDbType.Int),
				new Sqlcon.warning("@al_duty",SqlDbType.VarChar),
				new Sqlcon.warning("@al_mobile",SqlDbType.VarChar),
				new Sqlcon.warning("@al_smallclever",SqlDbType.VarChar),
				new Sqlcon.warning("@al_worktelephone",SqlDbType.VarChar),
				new Sqlcon.warning("@al_extension",SqlDbType.VarChar),
				new Sqlcon.warning("@al_fax",SqlDbType.VarChar),
				new Sqlcon.warning("@al_email",SqlDbType.VarChar),
				new Sqlcon.warning("@al_qq",SqlDbType.VarChar),
				new Sqlcon.warning("@al_msn",SqlDbType.VarChar),
				new Sqlcon.warning("@al_address",SqlDbType.VarChar),
				new Sqlcon.warning("@al_remark",SqlDbType.VarChar)
				};
            param[0].Value = addresslist.al_id;
            param[1].Value = addresslist.al_u_id;
            param[2].Value = addresslist.al_dept_id;
            param[3].Value = addresslist.al_duty;
            param[4].Value = addresslist.al_mobile;
            param[5].Value = addresslist.al_smallclever;
            param[6].Value = addresslist.al_worktelephone;
            param[7].Value = addresslist.al_extension;
            param[8].Value = addresslist.al_fax;
            param[9].Value = addresslist.al_email;
            param[10].Value = addresslist.al_qq;
            param[11].Value = addresslist.al_msn;
            param[12].Value = addresslist.al_address;
            param[13].Value = addresslist.al_remark;
            return SqlHelper.ExecuteNonQuery(Conn.SqlConn, CommandType.StoredProcedure, sqlCommand, param);
        }
        public int Update(SqlTransaction sp, addresslist addresslist)
        {
            string sqlCommand = "addresslistUpdate";
            Sqlcon.warning[] param ={
				new Sqlcon.warning("@al_id",SqlDbType.Int),
				new Sqlcon.warning("@al_u_id",SqlDbType.Int),
				new Sqlcon.warning("@al_dept_id",SqlDbType.Int),
				new Sqlcon.warning("@al_duty",SqlDbType.VarChar),
				new Sqlcon.warning("@al_mobile",SqlDbType.VarChar),
				new Sqlcon.warning("@al_smallclever",SqlDbType.VarChar),
				new Sqlcon.warning("@al_worktelephone",SqlDbType.VarChar),
				new Sqlcon.warning("@al_extension",SqlDbType.VarChar),
				new Sqlcon.warning("@al_fax",SqlDbType.VarChar),
				new Sqlcon.warning("@al_email",SqlDbType.VarChar),
				new Sqlcon.warning("@al_qq",SqlDbType.VarChar),
				new Sqlcon.warning("@al_msn",SqlDbType.VarChar),
				new Sqlcon.warning("@al_address",SqlDbType.VarChar),
				new Sqlcon.warning("@al_remark",SqlDbType.VarChar)
				};
            param[0].Value = addresslist.al_id;
            param[1].Value = addresslist.al_u_id;
            param[2].Value = addresslist.al_dept_id;
            param[3].Value = addresslist.al_duty;
            param[4].Value = addresslist.al_mobile;
            param[5].Value = addresslist.al_smallclever;
            param[6].Value = addresslist.al_worktelephone;
            param[7].Value = addresslist.al_extension;
            param[8].Value = addresslist.al_fax;
            param[9].Value = addresslist.al_email;
            param[10].Value = addresslist.al_qq;
            param[11].Value = addresslist.al_msn;
            param[12].Value = addresslist.al_address;
            param[13].Value = addresslist.al_remark;
            return SqlHelper.ExecuteNonQuery(sp, CommandType.StoredProcedure, sqlCommand, param);
        }
        public int Delete(int al_id)
        {
            string sqlCommand = "addresslistDelete";
            Sqlcon.warning[] param ={
				new Sqlcon.warning("@al_id",SqlDbType.Int)
			};
            param[0].Value = al_id;
            return SqlHelper.ExecuteNonQuery(Conn.SqlConn, CommandType.StoredProcedure, sqlCommand, param);
        }
        public int Delete(addresslist addresslist)
        {
            string sqlCommand = "addresslistDelete";
            Sqlcon.warning[] param ={
				new Sqlcon.warning("@al_id",SqlDbType.Int)
			};
            param[0].Value = addresslist.al_id;
            return SqlHelper.ExecuteNonQuery(Conn.SqlConn, CommandType.StoredProcedure, sqlCommand, param);
        }
        public int Delete(SqlTransaction sp, int al_id)
        {
            string sqlCommand = "addresslistDelete";
            Sqlcon.warning[] param ={
				new Sqlcon.warning("@al_id",SqlDbType.Int)
			};
            param[0].Value = al_id;
            return SqlHelper.ExecuteNonQuery(sp, CommandType.StoredProcedure, sqlCommand, param);
        }
        public int Delete(SqlTransaction sp, addresslist addresslist)
        {
            string sqlCommand = "addresslistDelete";
            Sqlcon.warning[] param ={
				new Sqlcon.warning("@al_id",SqlDbType.Int)
			};
            param[0].Value = addresslist.al_id;
            return SqlHelper.ExecuteNonQuery(sp, CommandType.StoredProcedure, sqlCommand, param);
        }
        public addresslist Select(DataRow row)
        {
            addresslist obj = new addresslist();
            if (row != null)
            {
                obj.al_id = ((row["al_id"]) == DBNull.Value) ? 0 : Convert.ToInt32(row["al_id"]);
                obj.al_u_id = ((row["al_u_id"]) == DBNull.Value) ? 0 : Convert.ToInt32(row["al_u_id"]);
                obj.al_dept_id = ((row["al_dept_id"]) == DBNull.Value) ? 0 : Convert.ToInt32(row["al_dept_id"]);
                obj.al_duty = row["al_duty"].ToString();
                obj.al_mobile = row["al_mobile"].ToString();
                obj.al_smallclever = row["al_smallclever"].ToString();
                obj.al_worktelephone = row["al_worktelephone"].ToString();
                obj.al_extension = row["al_extension"].ToString();
                obj.al_fax = row["al_fax"].ToString();
                obj.al_email = row["al_email"].ToString();
                obj.al_qq = row["al_qq"].ToString();
                obj.al_msn = row["al_msn"].ToString();
                obj.al_address = row["al_address"].ToString();
                obj.al_remark = row["al_remark"].ToString();
            }
            else
            {
                return null;
            }
            return obj;
        }
        public addresslist Select(IDataReader dr)
        {
            addresslist obj = new addresslist();
            obj.al_id = ((dr["al_id"]) == DBNull.Value) ? 0 : Convert.ToInt32(dr["al_id"]);
            obj.al_u_id = ((dr["al_u_id"]) == DBNull.Value) ? 0 : Convert.ToInt32(dr["al_u_id"]);
            obj.al_dept_id = ((dr["al_dept_id"]) == DBNull.Value) ? 0 : Convert.ToInt32(dr["al_dept_id"]);
            obj.al_duty = dr["al_duty"].ToString();
            obj.al_mobile = dr["al_mobile"].ToString();
            obj.al_smallclever = dr["al_smallclever"].ToString();
            obj.al_worktelephone = dr["al_worktelephone"].ToString();
            obj.al_extension = dr["al_extension"].ToString();
            obj.al_fax = dr["al_fax"].ToString();
            obj.al_email = dr["al_email"].ToString();
            obj.al_qq = dr["al_qq"].ToString();
            obj.al_msn = dr["al_msn"].ToString();
            obj.al_address = dr["al_address"].ToString();
            obj.al_remark = dr["al_remark"].ToString();
            return obj;
        }
        public addresslist Select(int al_id)
        {
            return this.Select(al_id, false, false);
        }
        public addresslist Select(int al_id, bool bParentTable, bool bChildrenTable)
        {
            addresslist obj = null;
            Sqlcon.warning[] param ={
			new Sqlcon.warning("@al_id",SqlDbType.Int)
			};
            param[0].Value = al_id;
            string sqlCommand = "addresslistSelect";
            using (SqlDataReader dr = SqlHelper.ExecuteReader(Conn.SqlConn, CommandType.StoredProcedure, sqlCommand, param))
            {
                while (dr.Read())
                {
                    obj = this.Select(dr);
                }
            }
            this.Select(obj, bParentTable, bChildrenTable);
            return obj;
        }
        public void Select(addresslist obj, bool bParentTable, bool bChildrenTable)
        {
            if (bParentTable)
            {
                obj.users = usersBLL.Select(obj.al_u_id);
                obj.department = departmentBLL.Select(obj.al_dept_id);
            }
            if (bChildrenTable)
            {
            }
        }
        public void users(addresslist addresslist)
        {
            addresslist.users = usersBLL.Select(addresslist.al_u_id);
        }
        public void department(addresslist addresslist)
        {
            addresslist.department = departmentBLL.Select(addresslist.al_dept_id);
        }
        public IList<addresslist> Select()
        {
            return this.Select(false, false);
        }
        public IList<addresslist> Select(bool bParentTable, bool bChildrenTable)
        {
            IList<addresslist> list = new List<addresslist>();
            string sqlCommand = "addresslistSelectAll";
            using (SqlDataReader dr = SqlHelper.ExecuteReader(Conn.SqlConn, 
CommandType.StoredProcedure, sqlCommand))
            {
                while (dr.Read())
                {
                    list.Add(this.Select(dr));
                }
            }
            foreach (addresslist obj in list)
            {
                this.Select(obj, bParentTable, bChildrenTable);
            }
            return list;
        }
        public IList<addresslist> Select(string where)
        {
            return this.Select(where, false, false);
        }
        public IList<addresslist> Select(string where, bool bParentTable, bool bChildrenTable)
        {
            IList<addresslist> list = new List<addresslist>();
            Sqlcon.warning[] param ={
			new Sqlcon.warning("@where",SqlDbType.VarChar,8000)
			};
            param[0].Value = where;
            string sqlCommand = "addresslistSelectByParams";
            using (SqlDataReader dr = SqlHelper.ExecuteReader(Conn.SqlConn, 
CommandType.StoredProcedure, sqlCommand, param))
            {
                while (dr.Read())
                {
                    list.Add(this.Select(dr));
                }
            }
            foreach (addresslist obj in list)
            {
                this.Select(obj, bParentTable, bChildrenTable);
            }
            return list;
        }
        public IList<addresslist> Select(string foreignFieldName, int foreignFieldValue)
        {
            return this.Select(foreignFieldName, foreignFieldValue, false, false);
        }
        public IList<addresslist> Select(string foreignFieldName, int foreignFieldValue, bool bParentTable, bool bChildrenTable)
        {
            return this.Select(string.Format("{0}='{1}'", foreignFieldName, foreignFieldValue), bParentTable, bChildrenTable);
        }
        public void Select(string where, out int recordCount)
        {
            string sqlCommand = "addresslistCountByWhere";
            Sqlcon.warning[] param ={
			new Sqlcon.warning("@where",SqlDbType.VarChar,8000),
			new Sqlcon.warning("@recordCount",SqlDbType.Int)
			};
            param[0].Value = where;
            param[1].Direction = con.warningDirection.Output;
            SqlHelper.ExecuteNonQuery(Conn.SqlConn, CommandType.StoredProcedure, sqlCommand, param);
            recordCount = Convert.ToInt32(param[1].Value);
        }
        public IList<addresslist> Select(int pageSize, int pageIndex, string where)
        {
            return this.Select(pageSize, pageIndex, where, false, false);
        }
        public IList<addresslist> Select(int pageSize, int pageIndex, string where, bool bParentTable, bool bChildrenTable)
        {
            IList<addresslist> list = new List<addresslist>();
            string sqlCommand = "addresslistSelectByPagerParams";
            Sqlcon.warning[] param ={
			new Sqlcon.warning("@pageSize",SqlDbType.Int),
			new Sqlcon.warning("@pageIndex",SqlDbType.Int),
			new Sqlcon.warning("@where",SqlDbType.VarChar,8000)
			};
            param[0].Value = pageSize;
            param[1].Value = pageIndex;
            param[2].Value = where;
            using (SqlDataReader dr = SqlHelper.ExecuteReader(Conn.SqlConn, 
CommandType.StoredProcedure, sqlCommand, param))
            {
                while (dr.Read())
                {
                    list.Add(this.Select(dr));
                }
            }
            foreach (addresslist obj in list)
            {
                this.Select(obj, bParentTable, bChildrenTable);
            }
            return list;
        }
        public IList<addresslist> Select(CommandType commandType, string sqlCommand, params Sqlcon.warning[] param)
        {
            return this.Select(false, false, commandType, sqlCommand, param);
        }
        public IList<addresslist> Select(bool bParentTable, bool bChildrenTable, CommandType commandType, string sqlCommand, params Sqlcon.warning[] param)
        {
            IList<addresslist> list = new List<addresslist>();
            using (SqlDataReader dr = SqlHelper.ExecuteReader(Conn.SqlConn, commandType, sqlCommand, param))
            {
                while (dr.Read())
                {
                    list.Add(this.Select(dr));
                }
            }
            foreach (addresslist obj in list)
            {
                this.Select(obj, bParentTable, bChildrenTable);
            }
            return list;
        }
        public bool Exists(int al_id)
        {
            Sqlcon.warning[] param ={
                                 new Sqlcon.warning("@al_id",SqlDbType.Int)
                                 };
            param[0].Value = al_id;
            string sqlCommand = "addresslistIsExist";
            int a = Convert.ToInt32(SqlHelper.ExecuteScalar(Conn.SqlConn, CommandType.StoredProcedure, sqlCommand, param));
            if (a > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}
